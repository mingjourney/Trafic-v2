import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  station_flow_in: {},
  station_flow_out: {},
  station_flow_in_predict: {},
  station_flow_out_predict: {},
  total_flow_predict: {},
  line_flow_predict: {},
  section_flow: {},
  section_flow_predict: {},
};

export const slice = createSlice({
  name: "slice",
  initialState,
  reducers: {
    update(state, { payload }) {
      if (payload.station_flow) {
        // {"2019-01-23 22:24:00":{"59":"98"},"2019-01-23 22:25:00":{"22":"133","38":"53"},"2019-01-23 22:26:00":{"11":"312","39":"90","53":"117"},"2019-01-23 22:27:00":{"13":"73","20":"68","45":"51","68":"10"},"2019-01-23 22:28:00":{"71":"12"},"2019-01-23 22:29:00":{"1":"16","8":"223","10":"255","14":"62","19":"38","23":"31","30":"12","32":"14","36":"5","38":"44","58":"45","62":"17","68":"8","75":"49","80":"9"},"2019-01-23 22:30:00":{"1":"16","4":"240","19":"37","21":"13","40":"12","51":"138","60":"26","61":"22","70":"56","75":"51"},"2019-01-23 22:31:00":{"0":"11","3":"29","5":"89","7":"59","13":"55","18":"24","25":"24","26":"20","43":"27","46":"129","47":"54","69":"26","79":"12"}}
        if (payload.station_flow.status === "1") {
          (state.station_flow_in as any)[payload.station_flow.time] =
            (state.station_flow_in as any)[payload.station_flow.time] || {};
          (state.station_flow_in as any)[payload.station_flow.time][
            payload.station_flow.station_id
          ] = payload.station_flow.count;
        } else {
          (state.station_flow_out as any)[payload.station_flow.time] =
            (state.station_flow_out as any)[payload.station_flow.time] || {};
          (state.station_flow_out as any)[payload.station_flow.time][
            payload.station_flow.station_id
          ] = payload.station_flow.count;
        }
        // [[106, 3887], [0, 3121], [0, 1649], [0, 340], [0, 0], [0, 0]]
        // [[in out], [in out], [in out], [in out], [in out], [in out]]
        state.total_flow_predict = payload.total_flow_predict;
        // [[0, 0, 0, 165, 2062, 1056], [0, 0, 0, 126, 719, 522], [0, 0, 0, 75, 0, 75], [0, 0, 0, 13, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
        // [in in in out ou out], [in in in out ou out] ...(repeat 6 times)
        state.line_flow_predict = payload.line_flow_predict;
        // [[74, 0, 97, 148, 261, 147, 32, 120, 262, 564, 394, 278, 240, 113, 91, 495, 69, 44, 43, 10, 137, 5, 144, 100, 86, 50, 17, 25, 0, 37, 0, 28, 0, 72, 35, 0, 0, 36, 87, 119, 48, 17, 28, 39, 19, 100, 121, 148, 0, 45, 87, 159, 31, 74, 0, 62, 90, 38, 70, 65, 69, 31, 24, 33, 15, 45, 28, 18, 16, 49, 33, 34, 11, 1, 88, 121, 163, 255, 154, 73, 36], [74, 0, 94, 149, 279, 136, 19, 106, 251, 566, 400, 275, 241, 92, 77, 482, 58, 34, 36, 10, 131, 2, 145, 101, 82, 44, 6, 14, 0, 28, 0, 24, 0, 70, 29, 0, 0, 33, 84, 118, 44, 13, 25, 39, 15, 107, 125, 155, 0, 46, 67, 163, 22, 64, 0, 61, 97, 38, 76, 63, 77, 31, 27, 34, 20, 46, 29, 6, 3, 51, 21, 35, 0, 1, 86, 111, 154, 270, 163, 62, 30], [73, 0, 86, 143, 269, 138, 10, 88, 248, 556, 405, 268, 236, 83, 60, 472, 51, 25, 39, 10, 129, 1, 132, 100, 69, 48, 4, 17, 0, 33, 0, 27, 0, 75, 32, 0, 0, 33, 81, 117, 43, 15, 27, 40, 9, 107, 122, 151, 0, 42, 55, 155, 0, 61, 0, 57, 93, 34, 70, 60, 73, 31, 28, 39, 26, 51, 32, 11, 5, 56, 26, 42, 7, 4, 88, 107, 139, 261, 167, 62, 22], [71, 0, 82, 147, 281, 135, 6, 83, 258, 569, 403, 270, 232, 74, 70, 473, 59, 24, 42, 15, 139, 9, 138, 103, 80, 45, 8, 8, 0, 24, 0, 18, 0, 66, 38, 0, 0, 23, 83, 111, 44, 8, 25, 36, 3, 107, 111, 154, 0, 37, 26, 152, 2, 67, 0, 51, 85, 28, 68, 58, 75, 28, 25, 37, 25, 50, 29, 0, 0, 45, 23, 34, 1, 0, 89, 109, 150, 274, 173, 60, 26], [72, 0, 80, 132, 282, 140, 12, 63, 259, 574, 397, 287, 228, 69, 72, 477, 59, 12, 34, 15, 122, 0, 119, 95, 64, 46, 0, 15, 0, 33, 0, 25, 0, 73, 33, 0, 0, 26, 75, 108, 39, 11, 25, 40, 4, 98, 117, 140, 0, 32, 20, 146, 0, 68, 0, 49, 88, 26, 67, 58, 75, 32, 24, 41, 25, 53, 26, 0, 0, 40, 10, 29, 0, 0, 95, 123, 144, 269, 164, 65, 32], [73, 0, 75, 140, 281, 140, 2, 66, 253, 569, 391, 272, 236, 53, 61, 472, 54, 10, 35, 13, 130, 0, 129, 93, 71, 51, 4, 12, 0, 36, 0, 31, 0, 68, 43, 0, 0, 30, 74, 112, 43, 17, 28, 47, 6, 108, 121, 149, 0, 37, 20, 159, 2, 70, 0, 51, 93, 26, 66, 60, 81, 36, 31, 48, 36, 59, 37, 0, 0, 45, 19, 32, 3, 0, 90, 115, 140, 273, 164, 56, 29]]
        // [81 elements] * 6 times
        state.station_flow_in_predict = payload.station_flow_in_predict;
        state.station_flow_out_predict = payload.station_flow_out_predict;
      } else if (payload.section_flow) {
        // {"2019-01-23 23:13:00":{"38-37":"84","19-20":"748","45-44":"272","76-75":"215","79-80":"331","55-56":"508","30-29":"69","17-16":"225","67-68":"5","25-26":"119","70-69":"104","14-13":"259","68-67":"53","19-18":"211","45-46":"137","76-77":"238","78-46":"252","36-35":"32","51-52":"23","44-45":"109","5-6":"185","29-30":"246","24-23":"68","1-2":"15","64-65":"88","65-64":"12","13-14":"609","15-80":"235"},"2019-01-23 23:14:00":{"45-44":"281","77-76":"180","58-59":"296","26-27":"65","69-68":"61","35-34":"17","19-20":"682","19-18":"212","45-46":"138","75-76":"221","70-69":"102","69-70":"43","35-36":"6","28-20":"76","43-42":"241","3-2":"114","54-53":"226","27-26":"9","36-35":"35","5-4":"206","38-39":"31","0-1":"7","46-77":"170","2-1":"57","71-72":"99","50-10":"153","28-29":"271","7-8":"227","15-14":"277","17-16":"222","14-13":"248","30-29":"68","53-54":"523","15-16":"881","42-43":"81","26-25":"13","48-47":"174","55-54":"226","74-73":"166","1-2":"13"}}
        (state.section_flow as any)[payload.section_flow.time] =
          (state.section_flow as any)[payload.section_flow.time] || {};
        (state.section_flow as any)[payload.section_flow.time][
          payload.section_flow.section
        ] = payload.section_flow.count;
        // [61, 74, 202, 261, 566, 676, 695, 833, 969, 1252, 1244, 1321, 1313, 1302, 526, 637, 724, 830, 923, 916, 920, 903, 1612, 1445, 1422, 1385, 1362, 782, 743, 576, 492, 340, 208, 100, 539, 501, 420, 363, 327, 256, 583, 573, 579, 504, 436, 408, 388, 343, 279, 190, 130, 82, 394, 418, 379, 395, 19, 936, 982, 935, 935, 883, 838, 734, 657, 608, 560, 469, 367, 242, 183, 77, 412, 391, 367, 335, 296, 236, 153, 76, 97, 165, 234, 344, 361, 481, 494, 1262, 379, 578, 391, 399, 656, 467, 390, 886, 295, 1009, 17, 1022, 393, 986, 423, 320, 1000, 392, 483, 1037, 813, 814, 786, 721, 691, 472, 456, 410, 375, 239, 91, 31, 262, 253, 216, 183, 178, 157, 38, 51, 76, 126, 155, 196, 219, 237, 250, 244, 328, 394, 410, 445, 485, 35, 19, 29, 28, 37, 644, 43, 608, 526, 526, 445, 339, 303, 269, 210, 154, 125, 102, 79, 78, 28, 19, 52, 123, 182, 224, 239, 326, 343]
        // [sections]
        // this is a 1d-array of all the sections, not a 2d-array of sections by time
        state.section_flow_predict = payload.section_flow_predict;
      }
    },
  },
});

export default slice.reducer;
